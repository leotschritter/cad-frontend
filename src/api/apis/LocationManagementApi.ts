/* tslint:disable */
/* eslint-disable */
/**
 * Travel App API
 * API for managing travel itineraries, locations, and social interactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LocationDto,
  LocationImageUploadResponseDto,
  MessageResponseDto2,
} from '../models/index';
import {
    LocationDtoFromJSON,
    LocationDtoToJSON,
    LocationImageUploadResponseDtoFromJSON,
    LocationImageUploadResponseDtoToJSON,
    MessageResponseDto2FromJSON,
    MessageResponseDto2ToJSON,
} from '../models/index';

export interface LocationItineraryItineraryIdGetRequest {
    itineraryId: number;
}

export interface LocationItineraryItineraryIdPostRequest {
    itineraryId: number;
    name?: string;
    description?: string;
    fromDate?: string;
    toDate?: string;
    files?: Array<Blob>;
}

export interface LocationLocationIdDeleteRequest {
    locationId: number;
}

export interface LocationLocationIdGetRequest {
    locationId: number;
}

export interface LocationLocationIdImagesDeleteRequest {
    locationId: number;
    imageUrl: string;
}

export interface LocationLocationIdImagesPostRequest {
    locationId: number;
    files?: Array<Blob>;
}

/**
 * 
 */
export class LocationManagementApi extends runtime.BaseAPI {

    /**
     * Retrieves all locations for a specific itinerary.
     * Get locations for itinerary
     */
    async locationItineraryItineraryIdGetRaw(requestParameters: LocationItineraryItineraryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LocationDto>>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling locationItineraryItineraryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/location/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocationDtoFromJSON));
    }

    /**
     * Retrieves all locations for a specific itinerary.
     * Get locations for itinerary
     */
    async locationItineraryItineraryIdGet(requestParameters: LocationItineraryItineraryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LocationDto>> {
        const response = await this.locationItineraryItineraryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new location to an existing itinerary. Upload images directly as multipart form data (optional). Images will be stored in Google Cloud Storage.
     * Add location to itinerary
     */
    async locationItineraryItineraryIdPostRaw(requestParameters: LocationItineraryItineraryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationDto>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling locationItineraryItineraryIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['name'] != null) {
            formParams.append('name', requestParameters['name'] as any);
        }

        if (requestParameters['description'] != null) {
            formParams.append('description', requestParameters['description'] as any);
        }

        if (requestParameters['fromDate'] != null) {
            formParams.append('fromDate', requestParameters['fromDate'] as any);
        }

        if (requestParameters['toDate'] != null) {
            formParams.append('toDate', requestParameters['toDate'] as any);
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }


        let urlPath = `/location/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationDtoFromJSON(jsonValue));
    }

    /**
     * Adds a new location to an existing itinerary. Upload images directly as multipart form data (optional). Images will be stored in Google Cloud Storage.
     * Add location to itinerary
     */
    async locationItineraryItineraryIdPost(requestParameters: LocationItineraryItineraryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationDto> {
        const response = await this.locationItineraryItineraryIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a location from an itinerary.
     * Delete location
     */
    async locationLocationIdDeleteRaw(requestParameters: LocationLocationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto2>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling locationLocationIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/location/{locationId}`;
        urlPath = urlPath.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseDto2FromJSON(jsonValue));
    }

    /**
     * Deletes a location from an itinerary.
     * Delete location
     */
    async locationLocationIdDelete(requestParameters: LocationLocationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto2> {
        const response = await this.locationLocationIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves a specific location by its ID.
     * Get location by ID
     */
    async locationLocationIdGetRaw(requestParameters: LocationLocationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationDto>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling locationLocationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/location/{locationId}`;
        urlPath = urlPath.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific location by its ID.
     * Get location by ID
     */
    async locationLocationIdGet(requestParameters: LocationLocationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationDto> {
        const response = await this.locationLocationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a specific image from a location by its URL.
     * Delete image from location
     */
    async locationLocationIdImagesDeleteRaw(requestParameters: LocationLocationIdImagesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessageResponseDto2>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling locationLocationIdImagesDelete().'
            );
        }

        if (requestParameters['imageUrl'] == null) {
            throw new runtime.RequiredError(
                'imageUrl',
                'Required parameter "imageUrl" was null or undefined when calling locationLocationIdImagesDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['imageUrl'] != null) {
            queryParameters['imageUrl'] = requestParameters['imageUrl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/location/{locationId}/images`;
        urlPath = urlPath.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageResponseDto2FromJSON(jsonValue));
    }

    /**
     * Deletes a specific image from a location by its URL.
     * Delete image from location
     */
    async locationLocationIdImagesDelete(requestParameters: LocationLocationIdImagesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessageResponseDto2> {
        const response = await this.locationLocationIdImagesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads one or more images to a location. Images will be stored in Google Cloud Storage.
     * Upload images to location
     */
    async locationLocationIdImagesPostRaw(requestParameters: LocationLocationIdImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LocationImageUploadResponseDto>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling locationLocationIdImagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }


        let urlPath = `/location/{locationId}/images`;
        urlPath = urlPath.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LocationImageUploadResponseDtoFromJSON(jsonValue));
    }

    /**
     * Uploads one or more images to a location. Images will be stored in Google Cloud Storage.
     * Upload images to location
     */
    async locationLocationIdImagesPost(requestParameters: LocationLocationIdImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LocationImageUploadResponseDto> {
        const response = await this.locationLocationIdImagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
