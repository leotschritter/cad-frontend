/* tslint:disable */
/* eslint-disable */
/**
 * Travel App API
 * API for managing travel itineraries, locations, and social interactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  UserDto,
} from '../models/index';
import {
    UserDtoFromJSON,
    UserDtoToJSON,
} from '../models/index';

export interface UserEmailProfileImageGetRequest {
    email: string;
}

export interface UserEmailProfileImagePostRequest {
    email: string;
    file?: Blob;
}

export interface UserGetGetRequest {
    email: string;
}

export interface UserRegisterPostRequest {
    userDto: UserDto;
}

/**
 * 
 */
export class UserManagementApi extends runtime.BaseAPI {

    /**
     * Retrieves the profile image URL for a user.
     * Get profile image URL
     */
    async userEmailProfileImageGetRaw(requestParameters: UserEmailProfileImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling userEmailProfileImageGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/user/{email}/profile-image`;
        urlPath = urlPath.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieves the profile image URL for a user.
     * Get profile image URL
     */
    async userEmailProfileImageGet(requestParameters: UserEmailProfileImageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userEmailProfileImageGetRaw(requestParameters, initOverrides);
    }

    /**
     * Uploads a profile image for a user. The image will be stored in Google Cloud Storage.
     * Upload profile image
     */
    async userEmailProfileImagePostRaw(requestParameters: UserEmailProfileImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling userEmailProfileImagePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }


        let urlPath = `/user/{email}/profile-image`;
        urlPath = urlPath.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads a profile image for a user. The image will be stored in Google Cloud Storage.
     * Upload profile image
     */
    async userEmailProfileImagePost(requestParameters: UserEmailProfileImagePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.userEmailProfileImagePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves user information by email address. Returns user details including name and email.
     * Get user by email
     */
    async userGetGetRaw(requestParameters: UserGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling userGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/user/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves user information by email address. Returns user details including name and email.
     * Get user by email
     */
    async userGetGet(requestParameters: UserGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.userGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new user account with name and email. No password authentication is required. Email must be unique.
     * Register a new user
     */
    async userRegisterPostRaw(requestParameters: UserRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDto>> {
        if (requestParameters['userDto'] == null) {
            throw new runtime.RequiredError(
                'userDto',
                'Required parameter "userDto" was null or undefined when calling userRegisterPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/user/register`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserDtoToJSON(requestParameters['userDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDtoFromJSON(jsonValue));
    }

    /**
     * Creates a new user account with name and email. No password authentication is required. Email must be unique.
     * Register a new user
     */
    async userRegisterPost(requestParameters: UserRegisterPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDto> {
        const response = await this.userRegisterPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
