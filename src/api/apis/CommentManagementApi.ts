/* tslint:disable */
/* eslint-disable */
/**
 * Travel App API
 * API for managing travel itineraries, locations, and social interactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommentDto,
  CommentRequest,
} from '../models/index';
import {
    CommentDtoFromJSON,
    CommentDtoToJSON,
    CommentRequestFromJSON,
    CommentRequestToJSON,
} from '../models/index';

export interface CommentCommentIdDeleteRequest {
    commentId: string;
    userEmail: string;
}

export interface CommentItineraryItineraryIdGetRequest {
    itineraryId: number;
}

export interface CommentItineraryItineraryIdPostRequest {
    itineraryId: number;
    commentRequest: CommentRequest;
}

export interface CommentUserUserEmailGetRequest {
    userEmail: string;
}

/**
 * 
 */
export class CommentManagementApi extends runtime.BaseAPI {

    /**
     * Deletes a comment. Users can only delete their own comments.
     * Delete comment
     */
    async commentCommentIdDeleteRaw(requestParameters: CommentCommentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['commentId'] == null) {
            throw new runtime.RequiredError(
                'commentId',
                'Required parameter "commentId" was null or undefined when calling commentCommentIdDelete().'
            );
        }

        if (requestParameters['userEmail'] == null) {
            throw new runtime.RequiredError(
                'userEmail',
                'Required parameter "userEmail" was null or undefined when calling commentCommentIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userEmail'] != null) {
            queryParameters['userEmail'] = requestParameters['userEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/comment/{commentId}`;
        urlPath = urlPath.replace(`{${"commentId"}}`, encodeURIComponent(String(requestParameters['commentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a comment. Users can only delete their own comments.
     * Delete comment
     */
    async commentCommentIdDelete(requestParameters: CommentCommentIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.commentCommentIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all comments for a specific itinerary, ordered by creation date (newest first).
     * Get comments for itinerary
     */
    async commentItineraryItineraryIdGetRaw(requestParameters: CommentItineraryItineraryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommentDto>>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling commentItineraryItineraryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/comment/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommentDtoFromJSON));
    }

    /**
     * Retrieves all comments for a specific itinerary, ordered by creation date (newest first).
     * Get comments for itinerary
     */
    async commentItineraryItineraryIdGet(requestParameters: CommentItineraryItineraryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommentDto>> {
        const response = await this.commentItineraryItineraryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a comment to an itinerary. Users can add multiple comments.
     * Add comment to itinerary
     */
    async commentItineraryItineraryIdPostRaw(requestParameters: CommentItineraryItineraryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommentDto>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling commentItineraryItineraryIdPost().'
            );
        }

        if (requestParameters['commentRequest'] == null) {
            throw new runtime.RequiredError(
                'commentRequest',
                'Required parameter "commentRequest" was null or undefined when calling commentItineraryItineraryIdPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/comment/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CommentRequestToJSON(requestParameters['commentRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommentDtoFromJSON(jsonValue));
    }

    /**
     * Adds a comment to an itinerary. Users can add multiple comments.
     * Add comment to itinerary
     */
    async commentItineraryItineraryIdPost(requestParameters: CommentItineraryItineraryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommentDto> {
        const response = await this.commentItineraryItineraryIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all comments made by a specific user, ordered by creation date (newest first).
     * Get comments by user
     */
    async commentUserUserEmailGetRaw(requestParameters: CommentUserUserEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CommentDto>>> {
        if (requestParameters['userEmail'] == null) {
            throw new runtime.RequiredError(
                'userEmail',
                'Required parameter "userEmail" was null or undefined when calling commentUserUserEmailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/comment/user/{userEmail}`;
        urlPath = urlPath.replace(`{${"userEmail"}}`, encodeURIComponent(String(requestParameters['userEmail'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CommentDtoFromJSON));
    }

    /**
     * Retrieves all comments made by a specific user, ordered by creation date (newest first).
     * Get comments by user
     */
    async commentUserUserEmailGet(requestParameters: CommentUserUserEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CommentDto>> {
        const response = await this.commentUserUserEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
