/* tslint:disable */
/* eslint-disable */
/**
 * Travel App API
 * API for managing travel itineraries, locations, and social interactions
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LikeDto,
  LikeResponseDto,
} from '../models/index';
import {
    LikeDtoFromJSON,
    LikeDtoToJSON,
    LikeResponseDtoFromJSON,
    LikeResponseDtoToJSON,
} from '../models/index';

export interface LikeItineraryItineraryIdDeleteRequest {
    itineraryId: number;
    userEmail: string;
}

export interface LikeItineraryItineraryIdGetRequest {
    itineraryId: number;
}

export interface LikeItineraryItineraryIdPostRequest {
    itineraryId: number;
    userEmail: string;
}

export interface LikeUserUserEmailGetRequest {
    userEmail: string;
}

/**
 * 
 */
export class LikeManagementApi extends runtime.BaseAPI {

    /**
     * Removes a like from an itinerary.
     * Remove like from itinerary
     */
    async likeItineraryItineraryIdDeleteRaw(requestParameters: LikeItineraryItineraryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling likeItineraryItineraryIdDelete().'
            );
        }

        if (requestParameters['userEmail'] == null) {
            throw new runtime.RequiredError(
                'userEmail',
                'Required parameter "userEmail" was null or undefined when calling likeItineraryItineraryIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userEmail'] != null) {
            queryParameters['userEmail'] = requestParameters['userEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/like/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a like from an itinerary.
     * Remove like from itinerary
     */
    async likeItineraryItineraryIdDelete(requestParameters: LikeItineraryItineraryIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.likeItineraryItineraryIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves the number of likes for a specific itinerary.
     * Get like count for itinerary
     */
    async likeItineraryItineraryIdGetRaw(requestParameters: LikeItineraryItineraryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LikeResponseDto>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling likeItineraryItineraryIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/like/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LikeResponseDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves the number of likes for a specific itinerary.
     * Get like count for itinerary
     */
    async likeItineraryItineraryIdGet(requestParameters: LikeItineraryItineraryIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LikeResponseDto> {
        const response = await this.likeItineraryItineraryIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a like to an itinerary. Users can only like once per itinerary.
     * Like an itinerary
     */
    async likeItineraryItineraryIdPostRaw(requestParameters: LikeItineraryItineraryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LikeDto>> {
        if (requestParameters['itineraryId'] == null) {
            throw new runtime.RequiredError(
                'itineraryId',
                'Required parameter "itineraryId" was null or undefined when calling likeItineraryItineraryIdPost().'
            );
        }

        if (requestParameters['userEmail'] == null) {
            throw new runtime.RequiredError(
                'userEmail',
                'Required parameter "userEmail" was null or undefined when calling likeItineraryItineraryIdPost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userEmail'] != null) {
            queryParameters['userEmail'] = requestParameters['userEmail'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/like/itinerary/{itineraryId}`;
        urlPath = urlPath.replace(`{${"itineraryId"}}`, encodeURIComponent(String(requestParameters['itineraryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LikeDtoFromJSON(jsonValue));
    }

    /**
     * Adds a like to an itinerary. Users can only like once per itinerary.
     * Like an itinerary
     */
    async likeItineraryItineraryIdPost(requestParameters: LikeItineraryItineraryIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LikeDto> {
        const response = await this.likeItineraryItineraryIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all likes made by a specific user.
     * Get likes by user
     */
    async likeUserUserEmailGetRaw(requestParameters: LikeUserUserEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LikeDto>>> {
        if (requestParameters['userEmail'] == null) {
            throw new runtime.RequiredError(
                'userEmail',
                'Required parameter "userEmail" was null or undefined when calling likeUserUserEmailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/like/user/{userEmail}`;
        urlPath = urlPath.replace(`{${"userEmail"}}`, encodeURIComponent(String(requestParameters['userEmail'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LikeDtoFromJSON));
    }

    /**
     * Retrieves all likes made by a specific user.
     * Get likes by user
     */
    async likeUserUserEmailGet(requestParameters: LikeUserUserEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LikeDto>> {
        const response = await this.likeUserUserEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
