/* tslint:disable */
/* eslint-disable */
/**
 * travel-app API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ItineraryDto,
  ItinerarySearchDto,
  ItinerarySearchResponseDto,
} from '../models/index';
import {
    ItineraryDtoFromJSON,
    ItineraryDtoToJSON,
    ItinerarySearchDtoFromJSON,
    ItinerarySearchDtoToJSON,
    ItinerarySearchResponseDtoFromJSON,
    ItinerarySearchResponseDtoToJSON,
} from '../models/index';

export interface ItineraryCreateEmailPostRequest {
    email: string;
    itineraryDto: ItineraryDto;
}

export interface ItineraryCreatePostRequest {
    userId: number;
    itineraryDto: ItineraryDto;
}

export interface ItineraryGetEmailGetRequest {
    email: string;
}

export interface ItineraryGetGetRequest {
    userId: number;
}

export interface ItinerarySearchPostRequest {
    itinerarySearchDto: ItinerarySearchDto;
}

/**
 * 
 */
export class ItineraryManagementApi extends runtime.BaseAPI {

    /**
     * Creates a new travel itinerary for a specific user. The itinerary must include title, destination, start date, and descriptions.
     * Create a new itinerary
     */
    async itineraryCreateEmailPostRaw(requestParameters: ItineraryCreateEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling itineraryCreateEmailPost().'
            );
        }

        if (requestParameters['itineraryDto'] == null) {
            throw new runtime.RequiredError(
                'itineraryDto',
                'Required parameter "itineraryDto" was null or undefined when calling itineraryCreateEmailPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/itinerary/create/{email}`;
        urlPath = urlPath.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItineraryDtoToJSON(requestParameters['itineraryDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new travel itinerary for a specific user. The itinerary must include title, destination, start date, and descriptions.
     * Create a new itinerary
     */
    async itineraryCreateEmailPost(requestParameters: ItineraryCreateEmailPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itineraryCreateEmailPostRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new travel itinerary for a specific user. The itinerary must include title, destination, start date, and descriptions.
     * Create a new itinerary
     */
    async itineraryCreatePostRaw(requestParameters: ItineraryCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling itineraryCreatePost().'
            );
        }

        if (requestParameters['itineraryDto'] == null) {
            throw new runtime.RequiredError(
                'itineraryDto',
                'Required parameter "itineraryDto" was null or undefined when calling itineraryCreatePost().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/itinerary/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItineraryDtoToJSON(requestParameters['itineraryDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a new travel itinerary for a specific user. The itinerary must include title, destination, start date, and descriptions.
     * Create a new itinerary
     */
    async itineraryCreatePost(requestParameters: ItineraryCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.itineraryCreatePostRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves all itineraries associated with a specific user Email. Returns a list of itinerary details including title, destination, start date, and descriptions.
     * Get itineraries for a user
     */
    async itineraryGetEmailGetRaw(requestParameters: ItineraryGetEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ItineraryDto>>> {
        if (requestParameters['email'] == null) {
            throw new runtime.RequiredError(
                'email',
                'Required parameter "email" was null or undefined when calling itineraryGetEmailGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/itinerary/get/{email}`;
        urlPath = urlPath.replace(`{${"email"}}`, encodeURIComponent(String(requestParameters['email'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItineraryDtoFromJSON));
    }

    /**
     * Retrieves all itineraries associated with a specific user Email. Returns a list of itinerary details including title, destination, start date, and descriptions.
     * Get itineraries for a user
     */
    async itineraryGetEmailGet(requestParameters: ItineraryGetEmailGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ItineraryDto>> {
        const response = await this.itineraryGetEmailGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all itineraries associated with a specific user ID. Returns a list of itinerary details including title, destination, start date, and descriptions.
     * Get itineraries for a user
     */
    async itineraryGetGetRaw(requestParameters: ItineraryGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ItineraryDto>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling itineraryGetGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/itinerary/get`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItineraryDtoFromJSON));
    }

    /**
     * Retrieves all itineraries associated with a specific user ID. Returns a list of itinerary details including title, destination, start date, and descriptions.
     * Get itineraries for a user
     */
    async itineraryGetGet(requestParameters: ItineraryGetGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ItineraryDto>> {
        const response = await this.itineraryGetGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for itineraries based on various criteria including user name, user email, title, destination, description, and start date range. All search parameters are optional - empty/null values will be ignored.
     * Search itineraries
     */
    async itinerarySearchPostRaw(requestParameters: ItinerarySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ItinerarySearchResponseDto>>> {
        if (requestParameters['itinerarySearchDto'] == null) {
            throw new runtime.RequiredError(
                'itinerarySearchDto',
                'Required parameter "itinerarySearchDto" was null or undefined when calling itinerarySearchPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/itinerary/search`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ItinerarySearchDtoToJSON(requestParameters['itinerarySearchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ItinerarySearchResponseDtoFromJSON));
    }

    /**
     * Search for itineraries based on various criteria including user name, user email, title, destination, description, and start date range. All search parameters are optional - empty/null values will be ignored.
     * Search itineraries
     */
    async itinerarySearchPost(requestParameters: ItinerarySearchPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ItinerarySearchResponseDto>> {
        const response = await this.itinerarySearchPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
